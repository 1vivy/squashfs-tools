	SQUASHFS-TOOLS 4.5 - A squashed read-only filesystem for Linux

	Copyright 2002-2021 Phillip Lougher <phillip@squashfs.org.uk>

	Released under the GPL licence (version 2 or later).

Welcome to Squashfs-Tools 4.5.  The last release was just over 1 and half years
ago, and there are substantial improvements to the tools in this release.

Please see the INSTALL file for instructions on installing the tools,
and the USAGE file for documentation on how to use the tools.

Summary of changes (and sections below)
---------------------------------------

1. Major improvements in Mksquashfs
------------------------------------

1.1 Mksquashfs now supports "Actions". These are modelled on "find"
    and allow compression, fragment packing, file exclusion and
    file attributes to be changed on a per-file basis (see section 4).

1.2 Tar style handling of source pathnames in Mksquashfs.  If option is
    specified, Mksquashfs will not strip leading directories (see
    section 5).

1.3 New option to throttle the amount of CPU and I/O Mksquashfs uses
    (see section 6).

1.4 New Pseudo file definitions which support timestamps (see section 7).

1.5 New Pseudo file definitions to create Hard Links and Sockets/Fifos
    (see section 8).

1.6 New Pseudo file "R" definition which allows a Regular file to
    be created with data stored within the Pseudo file (see 2.3 below).


2. Major improvements in Unsquashfs
-----------------------------------

2.1 New Sqfscat command which will output the contents of one or
    more files to standard out (Unsquashfs called as sqfscat, also
    Unsquashfs -cat option).

2.2 Symbolic links are now followed in extract files, if -follow-symlinks
    or -missing-symlinks option specified.

2.3 Unsquashfs now supports "exclude" files in addition to "extract"
    files.

2.4 Max depth traversal option added (-max-depth).

2.5 Unsquashfs can now output a "Pseudo file" representing the
    input Squashfs filesystem.  This can be altered and given
    as input to Mksquashfs to re-generate the filesystem without
    unpacking it.


3. Minor improvements and bug fixes
-----------------------------------

3.1 New -one-file-system option in Mksquashfs, which tells
    Mksquashfs to not cross filesystem boundaries when
    scanning the sources.

3.2 New -no-hardlinks option in Mksquashfs, which makes
    Mksquashfs treat hardlinked files as duplicates instead.

3.3 Mksquashfs now allows no source directory ( specified as - )
    to be specified, with all input from pseudo file definitions.

3.4 New -help options in Mksquashfs and Unsquashfs which output
    to standard out, rather than standard error.

3.5 -no-exit-code option added to Unsquashfs which makes it
    not output an error exit code.

3.6 Exit code in Unsquashfs changed to distinguish between
    non-fatal errors (exit of 2), and fatal errors
    (exit code of 1).

3.7 Xattr id count added in Unsquashfs "-stat" output.

3.8 Unsquashfs "write outside directory" exploit fixed.

3.9 Error handling in Unsquashfs writer thread fixed.

3.10 Fix failure to truncate destination file when appending
     aborted in Mksquashfs.

3.11 Prevent Mksquashfs reading the destination file
     as input.


4. Mksquashfs Actions Introduction
----------------------------------

The new Mksquashfs Actions code allows an "action" to be executed
on a file if one or more "tests" succeed.  If you're familiar
with the "find" command, then an action is similar to "-print",
and a test is similar to say "-name" or "-type".

To illustrate this it is useful to give two concrete examples.

example 1: the fragment action

% mksquashfs /home/phillip/github github.sqsh -action "fragment(cfiles) @ name(*.[ch])" -action "fragment(ofiles) @ name(*.o)"

This example defines two "fragment actions" which control the packing
of files within fragments.  Specifically, it creates a specialised fragment
called "cfiles" which packs files matching the wildcard name "*.[ch]".

It also creates another specialised fragment called "ofiles" which packs
files matching the wilcard name "*.o".

Producing specialised fragments which only pack files which match a range
of tests, can produce better compression and/or I/O performance as
it can optimise similarity or access patterns.  But it can also
produce worse compression, and so you should always test
the effect.

Additionally, you should be able to see that an action definition is split
into an action function before the "@", and one or more test functions
after the @.  Quoting is necessary here to protect it from interpretation
by the shell.  Also the spacing before and after the "@" isn't necessary
and is used here for added readability.

example 2: the uncompressed action

% mksquashfs /home/phillip backup.sqsh -action "uncompressed @ ( name(*.jpg) || name(*.mpg) ) || ( name(*.img) && filesize(+1G) )"

This is a more complex example.  It tells Mksquashfs to not try and
compress any file which matches the wildcard names "*.jpg" and "*.mpg".
But it also tells Mksquashfs not to try and compress files which match
the wildcard name "*.img" and are also 1 Gigabyte in size or larger.

This example introduces the fact that tests can be combined using
the logical operators && (and), || (or) and ! (not), and can be
bracketed.

Please see the ACTIONS-USAGE file for syntax and extra information.


5. Tar style handling of source directories in Mksquashfs
---------------------------------------------------------

Mksquashfs has always stripped the leading directories of any source
pathnames given on the command line.

For example given the command line

% mksquashfs dir-a/dir-b/dir-c/file1 dir-A/dir-B/file2 sqfs

Mksquashfs will strip the leading directories, and put file1 and file2
into the same root directory.  If file1 and file2 were directories it
would place their contents into the same root directory.

At lot of people don't like this, and wouild prefer Mksquashfs acted
like "tar", which does not strip leading directories. In the above example,
the tar archive would contain the pathnames "dir-a/dir-b/dir-c/file1" and
"dir-A/dir-B/file2".

Mksquashfs will now act like tar if given the option -no-strip, or -tarstyle.


6. New option to throttle CPU and I/O Mksquashfs uses
-----------------------------------------------------

People have sometimes complained that Mksquashfs uses too much CPU and too
much I/O, and can make a computer become very slow, or over-heat, and
setting the processors option to 1 often doesn't have much effect.

The reason for this is because Mksquashfs tries to run as fast as possible,
as this is usually what people want.  Due to this it is highly parallelised,
and spawns multiple compression threads (for both blocks and fragments),
and by default one each of those compression threads are spawned per core.
In addition it also has separate reader and writer threads and large caches
to ensure I/O through-put is maximised and performed in parallel with the
compression threads (called read-ahead and write-behind).

This means even when the "-processors 1" option is set, there is still a
lot of parallel processing being performed, because the minmimum set of
threads is a single block compression thread, a single fragment compression
thread, and both a reader and writer thread.  Unfortunately, these threads
can easily still max out a single core, so that it is never idle.  On a
multi-core machine the "-processors 1" option usually produces a CPU load
of around 130-180%.

The solution adopted is to add an I/O "throttle", which will regulate the
amount of I/O performed, and ultimately, how much CPU is consumed.  This
throttle can be set from 0 - 100, with the following two options added.

-throttle <percentage> has the semantics of throttle the reader by X%.  The
higher the percentage, the greater the throughput of the reader thread is
reduced.

-limit <percentage> has the opposite sense of limit the output to X%.  The
higher the percentage, the greater the throughput of the reader thread.


7. New Pseudo file definitions with timestamps
----------------------------------------------

The Pseudo file definitions previously supported did not allow the time
of the file to be set.  New extended pseudo file definitions have been added
which take a <time> timestamp.  These are distinquished from the previous
definitions by using an upper-case type character.  For example the "D"
definition is identical to the previous "d" definition (it creates
a directory), but it takes a <time> timestamp.

The list of extended definitions are:

	filename D time mode uid gid
	filename M time mode uid gid
	filename B time mode uid gid major minor
	filename C time mode uid gid major minor
	filename F time mode uid gid command
	filename S time mode uid gid symlink

<time> can be either an unsigned decimal integer (which represents the
seconds since the epoch of 1970-01-01 01:00 UTC), or a "date string"
which is parsed and converted into an integer since the epoch, by calling
"date".

Because most date strings have spaces, they will need to be quoted, and if
entered on the command line, these quotes will need to be protected from the
shell by backslashes, i.e.

% mksquashfs x x.sqsh -p "file D \"1 jan 1980\" 0777 phillip phillip"

Obviously anything "date" accepts as a valid string can be used, such as
"yesterday", "last week" etc.


?. Compatiblity
---------------

Mksquashfs 4.4 generates 4.0 filesystems.  These filesystems are fully
compatible/interchangable with filesystems generated by Mksquashfs 4.x and are
mountable on 2.6.29 and later kernels.
